" URL: http://vim.wikia.com/wiki/Example_vimrc
" Authors: http://vim.wikia.com/wiki/Vim_on_Freenode
" Description: A minimal, but feature rich, example .vimrc. If you are a
"              newbie, basing your first .vimrc on this file is a good choice.
"              If you're a more advanced user, building your own .vimrc based
"              on this file is still a good idea.

"------------------------------------------------------------
" Features {{{1
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype plugin on

" Enable syntax highlighting
syntax on

"------------------------------------------------------------
" Plugins {{{1
"
" These enhance vim experience

" download vim-plug if not already present
if !filereadable(expand("~/.vim/autoload/plug.vim"))
	echo "Downloading junegunn/vim-plug to manage plugins..."
	silent !mkdir -p ${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/
	silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/plug.vim
	autocmd VimEnter * PlugInstall
endif

if filereadable(expand("~/.vim/autoload/plug.vim"))
	" echo "Downloading junegunn/vim-plug to manage plugins..."
	" silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" --create-dirs -fLo expand("~/tmp/abc/plug.vim")
endif

" activate plugins
call plug#begin(system('echo -n "${XDG_CONFIG_HOME:-$HOME}/.vim/plugged"'))
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'joshdick/onedark.vim'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'morhetz/gruvbox'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'altercation/vim-colors-solarized'
Plug 'lifepillar/vim-solarized8'
Plug 'chriskempson/base16-vim'
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'
Plug 'christoomey/vim-tmux-navigator'
Plug 'vimwiki/vimwiki'
call plug#end()

" ------------------------------------------------------------
" Matchit {{{1
"
" Jump to matching bracket,brace,etc.

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

set matchpairs+=<:>
set noshowmatch

" ------------------------------------------------------------
" NERDTree {{{1
"
" file explorer

let g:NERDTreeShowHidden = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = []
let g:NERDTreeStatusline = ''

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ------------------------------------------------------------
" VimWiki
"
" Personal Wiki

let wiki_1 = {}
let wiki_1.path = '~/Dropbox/vimwiki'
let wiki_1.syntax = 'markdown'
let wiki_1.ext = '.md'
let wiki_1.index = 'index'

let g:vimwiki_list = [wiki_1]
 
let g:vimwiki_global_ext = 0

" let wiki_2 = {}
" let wiki_2.path = '~/Dropbox/vimwiki'
" let wiki_2.syntax = 'default'
" let wiki_2.ext = '.wiki'
" 
" let g:vimwiki_list = [wiki_1,wiki_2]

" ------------------------------------------------------------
" Vim Airline {{{1
"
" Use colorful powerline as a status bar

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

"------------------------------------------------------------
" Color Theme {{{1
"
" Custom syntax highlighting colors

syntax enable
set background=dark
colorscheme solarized

"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window as mentioned above, and/or either of the following options:
" set confirm
" set autowriteall

" Better command-line completion
set wildmenu

set wildmode=longest,list,full

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set nohlsearch
set incsearch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
set nomodeline

"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" change Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

set showmode
set laststatus=2
set showtabline=2
set title

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

set noerrorbells

" Enable use of the mouse for all modes
set mouse=a

" Use system clipboard
set clipboard=unnamedplus

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number
set relativenumber
set numberwidth=5

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" <C-a> / <C-x> treat numbers as decimals
set nrformats=

set scrolloff=1
set sidescrolloff=5
set display+=lastline

set history=1000
set encoding=UTF-8

" Show non visible characters
set nolist
set listchars=tab:>-,nbsp:+,trail:-,eol:$

" Don't create backup / swap files
set nobackup
set nowritebackup
set noswapfile
set noundofile

" Create undo file in vim folder
" set undodir=~/.vim/undodir
" set undofile

" Text wrapping
set wrap
set linebreak
set textwidth=0

" Don't use folds
set foldmethod=manual
set nofoldenable

" Splits open at the bottom and right, which is non-retarded, unlike vim
" defaults.
set splitbelow
set splitright

" Don't look in the included files for the completion matches
set complete-=i

" Reread file when changed outside Vim
set autoread

"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=4
set softtabstop=4
set expandtab

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent
"set smartindent
" set smarttab

" Round indents to the next shiftwidth multiple
set shiftround

"-----------------------------------------------------------
" GUI {{{1
"
" options

" Apply the following settings only when in GUI mode
if has("gui_running")
  set guifont=DejaVuSansMono\ Nerd\ Font\ Mono\ 13
  " set guifont=MesloLGS\ Nerd\ Font\ Mono\ 13
  " set guifontwide=
  " set guioptions-=T         " Remove toolbar
  " set guioptions-=m         " Remove menubar
  " set guioptions-=r         " Remove scrollbar
  " set lines=999 columns=999 " Maximize GUI window
endif

"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings

" Set custom leader keys
let mapleader       =" "
let maplocalleader  ="\\"

inoremap jk <ESC>
inoremap jj <ESC>

" Clear highlighting
" nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" nnoremap <silent> <Leader>th :set hlsearch!<CR>

if empty(mapcheck('<C-U>', 'i'))
  inoremap <C-U> <C-G>u<C-U>
endif
if empty(mapcheck('<C-W>', 'i'))
  inoremap <C-W> <C-G>u<C-W>
endif

" Switch windows
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<
nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>
nnoremap <silent> <Leader>nf :NERDTreeFind<CR>

" $MYVIMC points to init.vim in case of NVIM
nnoremap <Leader>ev :edit $HOME/.vim/vimrc<CR>
nnoremap <Leader>sv :source $HOME/.vim/vimrc<CR>

" move lines up / down
" nnoremap <silent> <A-j> :move .+1<CR>==
" nnoremap <silent> <A-k> :move .-2<CR>==
" inoremap <silent> <A-j> <Esc>:move .+1<CR>==gi
" inoremap <silent> <A-k> <Esc>:move .-2<CR>==gi
" vnoremap <silent> <A-j> :move '>+1<CR>gv=gv
" vnoremap <silent> <A-k> :move '<-2<CR>gv=gv

" Terminal size
nnoremap <Leader>rs :set lines=20 columns=85<CR>
nnoremap <Leader>rh :set lines=43 columns=85<CR>
nnoremap <Leader>rb :set lines=43 columns=171<CR>

" Switch buffers
nnoremap <silent> ]B :blast<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>

" Expand %% to current directory path when in command mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" visual-star-search
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" markdown make bold/italic
vnoremap <Leader>mb c****<Esc>hP
vnoremap <Leader>mi c**<Esc>P

nnoremap <Leader>mb viwc****<Esc>hP
nnoremap <Leader>mi viwc**<Esc>P

nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

"----
" IPA
"
" shorthands

map! <C-v>z ʒ
map! <C-v>j dʒ
map! <C-v>v ð
map! <C-v>f θ
map! <C-v>n ŋ

map! <C-v>s ʃ
map! <C-v>c tʃ
map! <C-v>ah ɑː
map! <C-v>oh ɒ
map! <C-v>ae æ

map! <C-v>ai aɪ
map! <C-v>au aʊ
map! <C-v>er ɛ
map! <C-v>ei eɪ
map! <C-v>ih ɪ

map! <C-v>ie ɪə
map! <C-v>ee iː
map! <C-v>ou oʊ
map! <C-v>oa ɔː
map! <C-v>oi ɔɪ

map! <C-v>uu ʊ
map! <C-v>oo uː
map! <C-v>uh ʌ
map! <C-v>eh ə
map! <C-v>ea eə

map! <C-v>eu əʊ

"------------------------------------------------------------------------------
" Autocommands
" 
" Set arbitrary options when specific filetype is found

" Only do this part when compiled with support for autocommands
if has("autocmd")

  " Put all autocmds in some augroup and use au! to clear the group.
  augroup vimrc_autocmds
    au!

    " Enable filetype detection
    filetype on

    " Syntax of these languages is fussy over tabs Vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noet
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 et

    " Customisations based on house-style (arbitrary)
    autocmd FileType html setlocal ts=4 sts=4 sw=4 et inde=
    autocmd FileType css setlocal ts=4 sts=4 sw=4 et
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 et
    autocmd FileType python setlocal ts=4 sts=4 sw=4 et
    autocmd FileType vim setlocal ts=2 sts=2 sw=2 et
    autocmd Filetype cpp setlocal ts=4 sts=4 sw=4 et cindent
    autocmd Filetype c setlocal ts=4 sts=4 sw=4 et cindent
    autocmd Filetype asm setlocal ts=8 sts=8 sw=8 et

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml
    " Treat .pl files as Prolog (default is Perl)
    autocmd BufNewFile,BufRead *.pl setfiletype prolog

    " Disables auto commenting on newline:
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    if v:version > 703 || v:version == 703 && has("patch541")
      set formatoptions+=j " Delete comment character when joining commented lines
    endif

    " Trim certain files from trailing whitespaces
    autocmd BufWritePre *.py,*.js :call <SID>StripTrailingWhitespaces()

    " Use transparent background
    hi Normal ctermbg=NONE
    " hi Normal guibg=NONE ctermbg=NONE
  augroup END
endif

"------------------------------------------------------------
