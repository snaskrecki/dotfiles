set nocompatible
filetype off
syntax on

" download vim-plug if not already present
if ! filereadable(system('echo -n "${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/plug.vim"'))
  echo "Downloading junegunn/vim-plug to manage plugins..."
  silent !mkdir -p ${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/
  silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/plug.vim
  autocmd VimEnter * PlugInstall
endif

" activate plugins
call plug#begin(system('echo -n "${XDG_CONFIG_HOME:-$HOME}/.vim/plugged"'))
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'altercation/vim-colors-solarized'
Plug 'preservim/nerdtree'
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" Show invisible characters
set list
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
" Shortcut to rapidly toggle `set list`
nnoremap <Leader>l :set list!<CR>

" Default indentation: 4 spaces
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab

" Show relative line numbers in a column on the left
set number
set relativenumber
set numberwidth=5

" Only do this part when compiled with support for autocommands
if has("autocmd")
  " Enable filetype detection
  filetype on

  " Syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noet
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 et

  " Customisations based on house-style (arbitrary)
  autocmd FileType html setlocal ts=2 sts=2 sw=2 et
  autocmd FileType css setlocal ts=2 sts=2 sw=2 et
  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noet
  autocmd FileType python setlocal ts=4 sts=4 sw=4 et
  autocmd FileType vim setlocal ts=2 sts=2 sw=2 et

  " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml
  " Treat .pl files as Prolog (default is Perl)
  autocmd BufNewFile,BufRead *.pl setfiletype prolog

  " Disables auto commenting on newline:
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

  " Trim certain files from trailing whitespaces
  autocmd BufWritePre *.py,*.js :call <SID>StripTrailingWhitespaces()
endif

nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

set encoding=utf-8
set autoindent
set hidden
set backspace=2
set mouse=a
set showcmd
set laststatus=2
set ruler
set cmdheight=2
set showtabline=2
set clipboard=unnamedplus
set autoread
set autowrite

set scrolloff=1
set sidescrolloff=5
set display+=lastline

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

set hlsearch
set incsearch
set ignorecase
set smartcase

" Don't create backup / swap files
set nobackup
set nowritebackup
set noswapfile

set undodir=~/.vim/undodir
set undofile

" Text wrapping
set wrap
set linebreak
set textwidth=80

" Splits open at the bottom and right, which is non-retarded, unlike vim
" defaults.
set splitbelow
set splitright

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif
set matchpairs+=<:>
set noshowmatch

" Apply the following settings only when in GUI mode
if has("gui_running")
  set guifont=Dejavu\ Sans\ Mono\ 13 
  set guifontwide=
  set guioptions-=T         " Remove toolbar
  set guioptions-=m         " Remove menubar
  set guioptions-=r         " Remove scrollbar
  set lines=999 columns=999 " Maximize GUI window
else
endif

" color theme config
" set t_Co=256
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
syntax enable
set background=dark
let g:molokai_original = 1
" let g:onedark_hide_endofbuffer=0
" let g:onedark_termcolors=256
" let g:onedark_terminal_italics=0
colorscheme onedark

" vim-airline config
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='onedark'

" Use space as a leader key
let mapleader=" "

" Sane defaults
nnoremap Y y$

" Clear highlighting
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Edit config
nnoremap <Leader>ev :edit $HOME/.vim/vimrc<CR>
nnoremap <Leader>en :edit $HOME/.config/nvim/init.vim<CR>
nnoremap <Leader>sv :source $HOME/.vim/vimrc<CR>
nnoremap <Leader>sn :source $HOME/.config/nvim/init.vim<CR>
nnoremap <Leader>eb :edit $HOME/.bashrc<CR>
nnoremap <Leader>sb :!source $HOME/.bashrc<CR>

" Switch buffers
nnoremap <silent> ]B :blast<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>

" Switch windows
nnoremap <silent> <Leader>h :wincmd h<CR>
nnoremap <silent> <Leader>j :wincmd j<CR>
nnoremap <silent> <Leader>k :wincmd k<CR>
nnoremap <silent> <Leader>l :wincmd l<CR>

" markdown make bold/italic
vnoremap <Leader>mb c****<Esc>hP
vnoremap <Leader>mi c**<Esc>P
nnoremap <Leader>mb viwc****<Esc>hP
nnoremap <Leader>mi viwc**<Esc>P

nnoremap <silent> <Leader>nt :NERDTreeToggle<CR>
nnoremap <silent> <Leader>nf :NERDTreeFind<CR>

nnoremap <C-p> :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

"-----------------------------------------------------------
" Autocompletion {{{1
"
" Provides intellisense functionality to Vim

" Remove annoying warnings
let g:coc_disable_startup_warning = 1
