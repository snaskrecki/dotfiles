let mapleader       ="\\"
let maplocalleader  ="_"

set nocompatible
filetype plugin indent on
syntax on

set path+=$PWD/**

runtime macros/matchit.vim
set matchpairs+=<:>

" -----------------------------------------------------------------------------
" plugin management
" -----------------------------------------------------------------------------

" download vim-plug if not already present
if ! filereadable(system('echo -n "${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/plug.vim"'))
	echo "Downloading junegunn/vim-plug to manage plugins..."
	silent !mkdir -p ${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/
	silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ${XDG_CONFIG_HOME:-$HOME}/.vim/autoload/plug.vim
	autocmd VimEnter * PlugInstall
endif

" activate plugins
call plug#begin(system('echo -n "${XDG_CONFIG_HOME:-$HOME}/.vim/plugged"'))
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'joshdick/onedark.vim'
Plug 'sheerun/vim-polyglot'
call plug#end()

" -----------------------------------------------------------------------------
" vim-airline settings
" -----------------------------------------------------------------------------

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='onedark'

" -----------------------------------------------------------------------------
" Line numbers
" -----------------------------------------------------------------------------

" Precede each line with its line number
set number

" Show the line number relative to the line with the cursor in front of each
" line.
set relativenumber

" Minimal number of columns to use for the line number.
set numberwidth=5

" -----------------------------------------------------------------------------
" Indentation
" -----------------------------------------------------------------------------

" Number of spaces that a <Tab> in the file counts for
set tabstop=8

"	Number of spaces that a <Tab> counts for while performing editing
"	operations, like inserting a <Tab> or using <BS>.
set softtabstop=4

" Set shiftwidth to control how many columns text is indented with the reindent
" operations (<< and >>) and automatic C-style indentation
set shiftwidth=4

" Use the appropriate number of spaces to insert a <Tab>
set expandtab

" When on, a <Tab> in front of a line inserts blanks according to 'shiftwidth'. 
 set smarttab

" Round indent to multiple of 'shiftwidth'.
set shiftround

" Copy indent from current line when starting a new line 
set autoindent

" Do smart autoindenting when starting a new line.
set smartindent

" ----------------------------------------------------------------------------- 
" Color Theme
" ----------------------------------------------------------------------------- 

" number of color in the terminal
set t_Co=256

" This command switches on syntax highlighting:
syntax enable

" Use a dark background
set background=dark

" Use a particular colorscheme
colorscheme onedark

" When on, uses |highlight-guifg| and |highlight-guibg| attributes in
" the terminal (thus using 24-bit color). 
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" -----------------------------------------------------------------------------
" Miscellaneous
" -----------------------------------------------------------------------------

" Allow mouse
set mouse=a

" Use system clipboard
set clipboard+=unnamedplus

" Fix backspace behavior
set backspace=indent,eol,start

" <C-a> / <C-x> treat numbers as decimals
set nrformats=

" Buffer switch without saving changes
set hidden

" Command mode behavior
set wildmenu
set wildmode=longest,list,full

" Scroll
set scrolloff=1
set sidescrolloff=5
set display+=lastline

set history=200

" Status
set showcmd
set showmode
set ruler
set laststatus=2
set showtabline=2
set title

" Mute beeping when something fails
set visualbell
set t_vb=

" Search settings
set hlsearch
set incsearch
set ignorecase
set smartcase
set noshowmatch

" Don't create backup / swap files
set nobackup
set nowritebackup
set noswapfile

set wrap
set linebreak
set textwidth=80

" set foldmethod=indent

" Splits open at the bottom and right, which is non-retarded, unlike vim 
" defaults.
set splitbelow splitright

" Disables auto commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" File specific
if has("autocmd")
  autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et
endif

" -----------------------------------------------------------------------------
" Mappings
" -----------------------------------------------------------------------------

" Clear highlighting 
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

nnoremap <Leader>ev :edit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>
nnoremap <Leader>ep :edit $VIMCONFIG/after/ftplugin<CR>
nnoremap <Leader>eb :edit $HOME/.bashrc<CR>
nnoremap <Leader>sb :!source $HOME/.bashrc<CR>

" Terminal size
nnoremap <Leader>rs :set lines=20 columns=85<CR>
nnoremap <Leader>rh :set lines=43 columns=85<CR>
nnoremap <Leader>rb :set lines=43 columns=171<CR>

" Switch buffers
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]B :blast<CR>
nnoremap <silent> [B :bfirst<CR>

" Expand %% to current directory path when in command mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" visual-star-search
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
