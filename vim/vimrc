" For a paranoia.  typing something here
" Normally `:set nocp` is not needed, because it is done automatically
" when .vimrc is found.
if &compatible
  " `:set nocp` has many side effects. Therefore this should be done
  " only when 'compatible' is set.
  set nocompatible
endif

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
if has('autocmd')
  filetype plugin indent on
endif

syntax on   " Turn on syntax recognition
 
"------------------------------------------------------------------------------ 
" Plugins
"------------------------------------------------------------------------------ 

if ! filereadable(expand('~/.vim/autoload/plug.vim'))
	echo "Downloading junegunn/vim-plug to manage plugins..."
	silent !mkdir -p ~/.vim/autoload/
	silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.vim/autoload/plug.vim
	autocmd VimEnter * PlugInstall
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'

" Defaults everyone can agree on 
" Plug 'tpope/vim-sensible'

" Detailed info bar at the bottom
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" ctrl-p functionality
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Surround by tpope
Plug 'tpope/vim-surround'

" Repeating plugin action
Plug 'tpope/vim-repeat'

" Commenting out lines
Plug 'tpope/vim-commentary'

" Adds entire file as a text object functionality
" Plug 'kana/vim-textobj-entire'
" Plug 'kana/vim-textobj-user'

" File manager nerdtree
Plug 'scrooloose/nerdtree'

" [b, ]b for buffer nav etc.
Plug 'tpope/vim-unimpaired'

call plug#end()

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"------------------------------------------------------------------------------ 
" Color Theme
"------------------------------------------------------------------------------ 

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
  set t_Co=16
endif

" Enable syntax highlighting
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

set background =dark
colorscheme     solarized

" let g:solarized_termcolors=256


"------------------------------------------------------------------------------ 
" Search 
"------------------------------------------------------------------------------ 

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
" set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

set incsearch " search dynamically using partialy typed phrase


"------------------------------------------------------------------------------ 
" Save
"------------------------------------------------------------------------------

" Turn backup off, file with extensions .~, .bak, etc.
set nobackup
set nowritebackup
set noswapfile

set autoread

" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Use system clipboard
set clipboard+=unnamedplus

"------------------------------------------------------------------------------  
" Status bar {{{1
"------------------------------------------------------------------------------  

set laststatus  =2  " show status even when there is only one window
" set showtabline =2  " Always display the tabline, even if there is only one tab
set showmode        " show INSERT, NORMAL, etc. at the bottom
set showcmd         " pending command shown in the bottom right corner
set ruler           " cursor position on the bottom right

" Better command-line completion
set wildmenu
set wildmode=longest,list,full

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set relativenumber  " use relative numbering
set number          " show current line number instead of 0
set numberwidth=6   " line number column has always width equal to 6

"------------------------------------------------------------------------------  
" Indentation options {{{1
"------------------------------------------------------------------------------  
" Indentation settings according to personal preference.
 
" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth  =4
set softtabstop =4
set expandtab       " use spaces instead of tabs.
set smarttab        " backspace removes $shiftwidth spaces at the start of the 
                    " line
set shiftround      " tab / shifting moves to closest tabstop.
set autoindent      " Match indents on new lines.
set smartindent     " Intellegently dedent / indent new lines based on rules.
 
" Indentation settings for using hard tabs for indent. Display tabs as
" four characters wide.
"set shiftwidth=4
"set tabstop=4

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start


"------------------------------------------------------------------------------ 
" Editor
"------------------------------------------------------------------------------ 
 
" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline
 
set visualbell          " use visual bell instead audio signal
set t_vb=               " map visual bell to nothing

set complete-=i         " don't include file when performing autocompletion

set nrformats-=octal    " <C-a>, <C-x> operates only in decimal system

set mouse=a             " Enable using mouse

" Use utf-8 encoding when possible
if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
endif

" Quickly time out on keycodes, but never time out on mappings
if !has('nvim') && &ttimeoutlen == -1
    set notimeout
    set ttimeout
    set ttimeoutlen=200
endif

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

set wrap        " Wrap lines
set linebreak   " Don't break in the middle of a word

" Always show at least one line above/below the cursor.
if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

" whitespace as visual chars
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if &history < 1000
  set history=1000
endif

if &tabpagemax < 50
  set tabpagemax=50
endif

if !empty(&viminfo)
  set viminfo^=!
endif

set sessionoptions-=options
set viewoptions-=options


"-----------------------------------------------------------------------------
" Plugin Settings
"-----------------------------------------------------------------------------

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" YouCompleteMe
let g:ycm_use_clangd = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview
let g:clang_library_path='/usr/lib/llvm-6.0/lib/libclang.so.1'

" vim-airline
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
" let g:airline_theme = 'solarized'

" " powerline 
" python3 from powerline.vim import setup as powerline_setup
" python3 powerline_setup()
" python3 del powerline_setup

 let g:Powerline_symbols="fancy"


""-----------------------------------------------------------------------------
" Mappings {{{1
"-----------------------------------------------------------------------------
" Useful mappings
 
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

nnoremap c "_c

" Use <C-L> to clear the highlighting of :set hlsearch.
" if maparg('<C-L>', 'n') ==# ''
"   nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" endif

" if empty(mapcheck('<C-U>', 'i'))
"   inoremap <C-U> <C-G>u<C-U>
" endif

" if empty(mapcheck('<C-W>', 'i'))
"   inoremap <C-W> <C-G>u<C-W>
" endif

let mapleader =" "

" Shortcutting split navigation, saving a keypress:j
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

nnoremap K 5k
vnoremap K 5k
nnoremap J 5j
vnoremap J 5j

nnoremap <leader>j J

nnoremap <silent> <leader>/ :noh<CR>

nnoremap <leader>tt :tabnew<CR>
nnoremap <leader>tn :tabnext<CR>
nnoremap <leader>tp :tabprev<CR>
nnoremap <leader>to :tabo<CR>

nnoremap <leader>w :w<cr>

nnoremap <leader>ev :e ~/.vim/vimrc<cr>
nnoremap <leader>sv :so ~/.vim/vimrc<cr>

nnoremap <leader>mx :set lines=43 columns=184<cr>
nnoremap <leader>mn :set lines=30 columns=92<cr>

inoremap <leader>u <C-o>gUiw<ESC>Ea

" fzf
nnoremap <C-p> :<C-u>FZF<cr>

" NERDTree settings
map <leader>n :NERDTreeToggle<cr>

" expand '%%' shortcut to %:h in command mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

