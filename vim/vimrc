" For a paranoia. ;;
" Normally `:set nocp` is not needed, because it is done automatically
" when .vimrc is found.
if &compatible
  " `:set nocp` has many side effects. Therefore this should be done
  " only when 'compatible' is set.
  set nocompatible
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Solarized color theme
Plug 'altercation/vim-colors-solarized'

" Defaults everyone can agree on 
Plug 'tpope/vim-sensible'

" Detailed info bar at the bottom
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Surround by tpope
Plug 'tpope/vim-surround'

" Repeating plugin action
Plug 'tpope/vim-repeat'

" Commenting out lines
Plug 'tpope/vim-commentary'

" Adds entire file as a text object functionality
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'

" File manager nerdtree
Plug 'scrooloose/nerdtree'

" [b, ]b for buffer nav etc.
Plug 'tpope/vim-unimpaired'

call plug#end()

" Some basics:
nnoremap c "_c
set nocompatible
filetype plugin indent on
syntax on
set encoding=utf-8
set number relativenumber

" clipboard         Set clipboard provider
set clipboard+=unnamedplus

" Enable autocompletion:
set wildmode=longest,list,full

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" colorscheme       Sets favorite colorscheme
" syntax            Use filewise syntax highlighting
" background        Choose dark/light version of the color scheme
syntax          enable
set background =dark
colorscheme     solarized

" tabstop:          Width of tab character
" softtabstop:      Fine tunes the amount of white space to be added
" shiftwidth        Determines the amount of whitespace to add in normal mode
" expandtab:        When on uses space instead of tabs
set tabstop     =4
set softtabstop =4
set shiftwidth  =4
set expandtab

" <leader>          Custom leader key mapping
map <leader>   ='\'

nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>sv :so $MYVIMRC<cr>
nnoremap <leader>w :w<cr>

inoremap {<cr> {<cr>}<esc>O<tab>

" Preferring libclang over clangd
" Autoclosing preview window after completion
" disbale preview
" clang_complete settings
let g:ycm_use_clangd = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview
let g:clang_library_path='/usr/lib/llvm-6.0/lib/libclang.so.1'

" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

let g:airline#extensions#tabline#enabled = 1

" expand '%%' shortcut to %:h in command mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" NERDTree settings
map <leader>n :NERDTreeToggle<cr>

" Turn backup off, file with extensions .~, .bak, etc.
set nobackup
set nowritebackup
set noswapfile

" Status bar at the bottom
set laststatus=2

" show currently typed command "+p, 5d etc.
set showmode
set showcmd

" Blink cursor on error instead of beeping (grr)
set visualbell

" Show current position on the bar below
set ruler

" Highlight current line
set cursorline

" <C-a>, <C-x> operates only in decimal system
set nrformats=
