" custom dotvim folder location
" set runtimepath+=~/.config/vim,~/.config/vim/after

" Don't try to be Vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype indent plugin on

" Syntax recognition/highlighting
syntax on

"
" vim-plug automatic installation
"
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
"
" Plugins activation
"
call plug#begin('~/.vim/bundle')

" Solarized color theme
Plug 'altercation/vim-colors-solarized'

" Text centralization
" Plug 'https://github.com/junegunn/goyo.vim.git'

" Defaults everyone can agree on 
Plug 'tpope/vim-sensible'

" Detailed info bar at the bottom
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Autocompletion tool
" Plug 'valloric/youcompleteme'

" Surround by tpope
Plug 'tpope/vim-surround'

" Repeating plugin action
Plug 'tpope/vim-repeat'

" Commenting out lines
Plug 'tpope/vim-commentary'

" Adds entire file as a text object functionality
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'

" Monokai colorscheme available
" Plug 'crusoexia/vim-monokai'

" Gruvbox theme
" Plug 'morhetz/gruvbox'

" Dracula
Plug 'dracula/vim', { 'as': 'dracula' }

" File manager nerdtree
" Plug 'scrooloose/nerdtree'

call plug#end()
"
" altercation/vim-colors-solarized settings
"
syntax enable
set background=dark
colorscheme solarized
"
" ycm settings 
"
" Preferring libclang over clangd
let g:ycm_use_clangd = 0
" Autoclosing preview window after completion
let g:ycm_autoclose_preview_window_after_completion = 1
" disbale preview
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview

" clang_complete settings
" let g:clang_library_path='/usr/lib/llvm-6.0/lib/libclang.so.1'

" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

let g:airline#extensions#tabline#enabled = 1

" custom mappings
let mapleader ='\'
" mapping saving file to \w
noremap <leader>w :w<cr>
" mapping split and edit vimrc to \ev
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
"mapping sourcing vimrc to \sv
nnoremap <leader>sv :source $MYVIMRC<cr>
" buffer switching mappings
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
" expand '%%' shortcut to %:h in command mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" 
" NERDTree settings
"
map <leader>ntt :NERDTreeToggle<CR>

"
" Indentation settings (soft tabs / using spaces)
"
set expandtab " insert spaces when <tab> key is pressed
set shiftwidth=4 " shift 4 spaces when pressing '<' or '>' keys
set softtabstop=4 " backspace removes to previous tab position
set smartindent " automatically indent following lines

" Turn backup off, file with extensions .~, .bak, etc.
set nobackup
set nowritebackup
set noswapfile

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Status bar at the bottom
" set laststatus=2

" show currently typed command "+p, 5d etc.
" set showmode
set showcmd

" Blink cursor on error instead of beeping (grr)
set visualbell

" Relative numbering, show current line number
set number 
set relativenumber

" Show current position on the bar below
set ruler

" Encoding
set encoding=utf-8

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
" set hlsearch

" Start highlighting current query
" set incsearch

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
" nnoremap <C-L> :nohl<CR><C-L>

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
" set autoindent

" C-style indent
" set cindent

" Highlight current line
" set cursorline

" enable mouse
set mouse=a



" <C-a>, <C-x> operates only in decimal system
set nrformats=

" cmdline_mode scrolling with <TAB>, zsh-like
" set wildmenu
set wildmode=full

" number of items remembered in history 
" set history=200

" wrap too long lines for Markdown
" set textwidth=0
" set wrapmargin=0
" set wrap
" set linebreak 
" set columns=80

" visual changes
" set numberwidth=6
" set colorcolumn=80,100,120

