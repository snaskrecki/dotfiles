" For a paranoia. 
" Normally `:set nocp` is not needed, because it is done automatically
" when .vimrc is found.
if &compatible
  " `:set nocp` has many side effects. Therefore this should be done
  " only when 'compatible' is set.
  set nocompatible
endif

if ! filereadable(expand('~/.vim/autoload/plug.vim'))
	echo "Downloading junegunn/vim-plug to manage plugins..."
	silent !mkdir -p ~/.vim/autoload/
	silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.vim/autoload/plug.vim
	autocmd VimEnter * PlugInstall
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Solarized color theme
Plug 'altercation/vim-colors-solarized'

" Defaults everyone can agree on 
Plug 'tpope/vim-sensible'

" Detailed info bar at the bottom
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" ctrl-p functionality
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Surround by tpope
Plug 'tpope/vim-surround'

" Repeating plugin action
Plug 'tpope/vim-repeat'

" Commenting out lines
Plug 'tpope/vim-commentary'

" Adds entire file as a text object functionality
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'

" File manager nerdtree
Plug 'scrooloose/nerdtree'

" [b, ]b for buffer nav etc.
Plug 'tpope/vim-unimpaired'

call plug#end()

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on
 
" Enable syntax highlighting
syntax on

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"------------------------------------------------------------
" Color Theme
"

syntax          enable
set background =dark
colorscheme     solarized
set t_Co=256

"------------------------------------------------------------
" Search 
" 

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch
set incsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase


"------------------------------------------------------------
" Save
"

" Turn backup off, file with extensions .~, .bak, etc.
set nobackup
set nowritebackup
set noswapfile

set autoread

" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Use system clipboard
set clipboard+=unnamedplus


"------------------------------------------------------------
" Status bar {{{1
" 

set laststatus=2
set showtabline=2 " Always display the tabline, even if there is only one tab
set showmode " INSERT, NORMAL, ...
set showcmd " pending command shown in the bottom right corner
set ruler

" Better command-line completion
set wildmenu
set wildmode=longest,list,full

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set relativenumber


"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.
 
" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth  =4
set softtabstop =4
set expandtab       " use spaces instead of tabs.
set smarttab        " let's tab key insert 'tab stops', and bksp deletes tabs.
set shiftround      " tab / shifting moves to closest tabstop.
set autoindent      " Match indents on new lines.
set smartindent     " Intellegently dedent / indent new lines based on rules.
 
" Indentation settings for using hard tabs for indent. Display tabs as
" four characters wide.
"set shiftwidth=4
"set tabstop=4


"------------------------------------------------------------
" Editor
"
 
" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline
 
" Blink cursor on error instead of beeping (grr)
set visualbell
set t_vb=

" <C-a>, <C-x> operates only in decimal system
set nrformats=

set mouse=a
set encoding=utf-8

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200
 
" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings
 
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$
 
" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" <leader>          Custom leader key mapping
map <leader>   ='\'

nnoremap <leader>ev :e ~/.vim/vimrc<cr>
nnoremap <leader>sv :so ~/.vim/vimrc<cr>
nnoremap <leader>w :w<cr>
inoremap <leader>u <C-o>gUiw<ESC>Ea
nnoremap <C-p> :<C-u>FZF<cr>

nnoremap c "_c

" expand '%%' shortcut to %:h in command mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" NERDTree settings
map <leader>n :NERDTreeToggle<cr>

"------------------------------------------------------------
" Plugin specific
" 

" YouCompleteMe
let g:ycm_use_clangd = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview
let g:clang_library_path='/usr/lib/llvm-6.0/lib/libclang.so.1'

let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
" let g:airline_theme = 'solarized'

" " Powerline setup
" python3 from powerline.vim import setup as powerline_setup
" python3 powerline_setup()
" python3 del powerline_setup

" let g:Powerline_symbols="fancy"

